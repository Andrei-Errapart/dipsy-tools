#! /usr/bin/env python


"""
Download configuration over SPI to DIPSY (a sub-5 USD FPGA board).

Raspberry PI (excerpt from https://github.com/piface/pifacecommon/blob/master/docs/installation.rst):
1. Remove "spi-bcm2708" from the blacklist in /etc/modprobe.d/raspi-blacklist.conf
   or (kernel 3.18 or newer): add dtparam=spi=on to /boot/config/txt
2. Reboot or modprobe spi-bcm2708
3. Pinout on P1:
	25 = GND
	24 = SS (SPI HW)
	23 = SCLK
	22 = RESET
	21 = MISO
	20 = GND
	19 = MOSI
	18 = CDONE
	17 = +3.3V
	16 = SS
"""

import sys
import time
import pifacecommon.spi as SPI
import RPi.GPIO as GPIO

_SPI_DEVICE = "/dev/spidev0.0"
# P1 header numbering.
_CRESET_PIN	= 22
_CDONE_PIN	= 18
_SS_PIN		= 16

def split_by_size(s,n):
	r = []
	while len(s)>n:
		r.append(s[0:n])
		s = s[n:]
	if len(s)>0:
		r.append(s)
	return r

def configure_dipsy(configObject):
	# SPIDevice(bus, chip_select, spi_callback)
	spi = SPI.SPIDevice(0, 0, None)
	# P1 header pin numbering.
	GPIO.setmode(GPIO.BOARD)
	try:
		GPIO.setup(_CRESET_PIN, GPIO.OUT)
		GPIO.setup(_CDONE_PIN, GPIO.IN)
		GPIO.setup(_SS_PIN, GPIO.OUT)

		GPIO.output(_CRESET_PIN, GPIO.LOW)
		GPIO.output(_SS_PIN, GPIO.LOW)
		time.sleep(0.01)
		GPIO.output(_CRESET_PIN, GPIO.HIGH)
		time.sleep(0.01)

		# up to 4096 possible, but no benefit.
		config_list = split_by_size(configObject, 1024)
		for c in config_list:
			spi.spisend(c)
			
		done = GPIO.input(_CDONE_PIN)
		for i in range(0, 24):
			spi.spisend(b'\x00')
		GPIO.output(_SS_PIN, GPIO.HIGH)

		GPIO.setup(_CRESET_PIN, GPIO.IN)
		GPIO.setup(_SS_PIN, GPIO.IN)
	finally:
		GPIO.cleanup()
	return done

if len(sys.argv)<2:
	print "No configuration file for DIPSY specified on the command line"
	sys.exit(1)

input_filename = sys.argv[1]
print("Input file: " + input_filename)
config_bytes = open(input_filename, "rb").read()
print("Read " + str(len(config_bytes)) + " bytes.")

if configure_dipsy(config_bytes):
	print("Dipsy configured!")
else:
	print("Error: Dipsy not configured. Wrong connection or wrong file?")

